import 'package:flutter/material.dart';
import 'package:flutter_quill/flutter_quill.dart';
import 'package:hexcolor/hexcolor.dart';
import 'package:notes/controllers/notes_controllers.dart';
import 'package:notes/view/components/notes_title_textfield.dart';
import 'package:provider/provider.dart';
import 'package:vsc_quill_delta_to_html/vsc_quill_delta_to_html.dart';
import '../../controllers/todo_controller.dart';
import '../../utils/input_field_utils.dart';

class RefineScreen extends StatefulWidget {
  RefineScreen({super.key});

  @override
  State<RefineScreen> createState() => _RefineScreenState();
}

class _RefineScreenState extends State<RefineScreen> {
  TodoController todoController = TodoController();

  NotesControllers notesController = NotesControllers();

  // onTap: () async {
  //                 dynamic imageFile =
  //                     await InputFielUtils.getMyFile(['jpg', 'png', 'jpeg']);

  //                 await notesValue.uploadThumbnail(imageFile);
  //               },

    QuillController quilEditerController = QuillController(document: Document.fromJson(["aicxh"]), selection: TextSelection(baseOffset: 9, extentOffset: 9));
  ScrollController scrollController = ScrollController(); 

  @override
  void initState() {
    super.initState();
    // notesController= Provider.of<NotesControllers>(context,listen: false);

    quilEditerController.addListener(() {
      final deltaJson =
          quilEditerController.document.toDelta().toJson();
      final converter = QuillDeltaToHtmlConverter(
        List.castFrom(deltaJson),
        ConverterOptions.forEmail(),
      );
      dynamic html = converter.convert();
      dynamic htmldata = '$html';
      print(htmldata);
      // widget.getEditerData(htmldata);
    });
  }

  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    final dynamic screenhight = MediaQuery.of(context).size.height;
    final dynamic screenwidth = MediaQuery.of(context).size.width;

    return Consumer<NotesControllers>(
      builder:
          (BuildContext context, NotesControllers notesValue, Widget? child) {
        return QuillProvider(
          configurations: QuillConfigurations(
              controller: quilEditerController),
              
          child: Scaffold(
            appBar: AppBar(
              backgroundColor: HexColor("#133C58"),
              title: Text("Add a note"),
              flexibleSpace: Container(
                padding: EdgeInsets.fromLTRB(0, screenhight * 0.03, 30, 0),
                width: screenwidth * 0.50,
                height: screenhight * 0.10,
                alignment: Alignment.centerRight,
                child: const QuillToolbar(
                  configurations: QuillToolbarConfigurations(
                      showDividers: false,
                      showHeaderStyle: false,
                      showLink: false,
                      showSuperscript: false,
                      showIndent: false,
                      showColorButton: false,
                      showSearchButton: false,
                      showCodeBlock: false,
                      showStrikeThrough: false,
                      showListNumbers: false,
                      showInlineCode: false,
                      showBackgroundColorButton: false,
                      showUndo: true,
                      showRedo: true,
                      showClearFormat: false,
                      showQuote: false,
                      showBoldButton: false,
                      showItalicButton: false,
                      showUnderLineButton: false,
                      showSubscript: false,
                      showFontSize: false,
                      showListCheck: false,
                      showFontFamily: false,
                      showListBullets: false,
                      axis: Axis.horizontal,
                      sectionDividerSpace: 3.5,
                      toolbarSectionSpacing: 3.5),

                ),
              ),
              leading: InkWell(
                onTap: () {
                  Navigator.pop(context);
                },
                child: const Icon(
                  Icons.arrow_back_ios,
                  color: Colors.white,
                ),
              ),
            ),
            body: SingleChildScrollView(
              child: SizedBox(
                width: screenwidth,
                height: screenhight * 0.90,
                child: Form(
                  key: _formKey,
                  child: Stack(
                    children: [
                      SizedBox(
                        height: screenhight * 0.80,
                        child: SingleChildScrollView(
                          child: Column(
                            children: [
                              SizedBox(
                                height: screenhight * 0.10,
                                width: screenwidth,
                                child: NotesTitleTextfield(
                                  controller: InputFielUtils.notesController,
                                  isPasswordTextField: true,
                                  labelText: '',
                                  maxline: 1,
                                  placeholder: 'Title',
                                  width: screenwidth * 0.90,
                                  FocusNodeNames:
                                      InputFielUtils.titleTextFocusnode,
                                  changeFocusNode:
                                      InputFielUtils.paragraphTextFocusnode,
                                  iconName: Icons.lock,
                                ),
                              ),
                              QuillEditor(
                                focusNode:
                                    InputFielUtils.paragraphTextFocusnode,
                                configurations: QuillEditorConfigurations(
                                  readOnly: false,
                                  scrollable: true,
                                  padding: EdgeInsets.symmetric(
                                      horizontal: screenwidth * 0.04),
                                  autoFocus: false,
                                  expands: false, // true for view only mode
                                ),
                                scrollController:
                                   scrollController,
                              ),
                            ],
                          ),
                        ),
                      ),
                      Align(
                        alignment: Alignment.bottomCenter,
                        child: SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: Container(
                            // color: Colors.black,
                            height: screenhight * 0.08,
                            alignment: Alignment.centerLeft,
                            child: const QuillToolbar.basic(
                              configurations: QuillToolbarConfigurations(                         
                              dialogTheme: QuillDialogTheme(
                                runSpacing: 20.0,
                                shape: RoundedRectangleBorder(side: BorderSide(width: 8.0)),
                                buttonStyle: ButtonStyle(
                                  backgroundColor: MaterialStatePropertyAll(Colors.amber),
                                  iconSize: MaterialStatePropertyAll(30),
                                  overlayColor: MaterialStatePropertyAll(Colors.amber),
                                )

                              ),
                                
                              
                                  showFontFamily: false,
                                  showSearchButton: false,
                                  showUndo: false,
                                  showRedo: false,
                                  showSubscript: false,
                                  axis: Axis.horizontal,
                                  sectionDividerSpace: 3.5,
                                  toolbarSectionSpacing: 3.5),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}








      //  Expanded(
      //                 child: Container(
      //                   color: Colors.blueAccent,
      //                     width: screenwidth * 0.90,
      //                     height: screenhight*0.60,
      //                     child: NotesParaTextfield(
      //                       getEditerData: (data) {},
      //                       FocusNodeNames: InputFielUtils.paragraphTextFocusnode,
      //                     )),
      //               )













                key: const ValueKey(0),
          startActionPane: ActionPane(
            motion: const ScrollMotion(),

     


            extentRatio: 0.25,
            children: [
              // SlidableAction(
              //   icon: Icons.delete,
              //   onPressed: (buildctx) {},
              //   backgroundColor: HexColor('#A5FF8F'),
              //   foregroundColor: HexColor('#000000'),
              // ),
            ],
          ),

          ////////////////////////////////////////////////////////////////////









          import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:hexcolor/hexcolor.dart';
import 'package:lottie/lottie.dart';
import 'package:notes/controllers/notes_controllers.dart';
import 'package:notes/repository/firebase_realtime%20_db.dart';
import 'package:notes/utils/constants/assets.dart';
import 'package:notes/utils/constants/static_data.dart';
import 'package:notes/utils/routes/routes_name.dart';
import 'package:notes/view/components/paragraph_text.dart';
import 'package:provider/provider.dart';
import '../components/card2.dart';

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

List Categories = [
  "smartphones",
  "laptops",
  "fragrances",
];

class _MainScreenState extends State<MainScreen> {

   final scaffoldKey = GlobalKey<ScaffoldState>();

  NotesControllers notesController = NotesControllers();
  FirebaseRealTimeDatabase firebaseRealTimeDatabase =
      FirebaseRealTimeDatabase();

  @override
  void initState() {
    super.initState();
    notesController = Provider.of<NotesControllers>(context, listen: false);
  }

  @override
  Widget build(BuildContext context) {
    final dynamic screenhight = MediaQuery.of(context).size.height;
    final dynamic screenwidth = MediaQuery.of(context).size.width;
    return Scaffold(
      // backgroundColor: HexColor("#0D2A3C"),
      key: scaffoldKey,
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: BoxDecoration(
                color: HexColor("#0D2A3C"),
              ),
              child: Column(
                children: [
                  Container(
                    width: screenwidth * 0.20,
                    height: screenwidth * 0.20,
                    decoration: BoxDecoration(
                      // color: Colors.blueAccent,
                      borderRadius: BorderRadius.circular(100),
                    ),
                    child: ClipRRect(
                        borderRadius: BorderRadius.circular(100),
                        child: Lottie.asset(
                          AssetImgLinks.profile,
                          fit: BoxFit.fill,
                        )),
                  ),
                ],
              ),
            ),
            ListView.builder(
              itemCount: StaticData.drawerDatas.length,
              shrinkWrap: true,
              itemBuilder: (BuildContext context, int index) {
                var drawerData = StaticData.drawerDatas[index];
                return ListTile(
                  leading: Icon(
                    drawerData.icon,
                  ),
                  title: Text(drawerData.name.toString()),
                  onTap: () {

                  },
                );
              },
            )
          ],
        ),
      ),
      body: SafeArea(
          child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: screenwidth,
            height: screenhight * 0.10,
            // color: Colors.amberAccent,
            child: Stack(
              children: [
                Positioned(
                  top: screenwidth * 0.10,
                  left: screenwidth * 0.04,
                  child: InkWell(
                    onTap: () {
                      if (scaffoldKey.currentState!.isDrawerOpen) {
                        scaffoldKey.currentState!.closeDrawer();
                      } else {
                        scaffoldKey.currentState!.openDrawer();
                      }
                    },
                    child: SvgPicture.asset(
                      AssetImgLinks.hamBurgerIcon,
                      height: screenhight * 0.04,
                      width: screenwidth * 0.04,
                    ),
                  ),
                ),
                Positioned(
                  top: screenwidth * 0.05,
                  left: screenwidth * 0.20,
                  child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text.rich(
                          TextSpan(
                            children: [
                              TextSpan(
                                  text: 'H',
                                  style: GoogleFonts.poppins(
                                      color: HexColor("#DE5123"),
                                      fontSize: screenwidth * 0.080,
                                      fontWeight: FontWeight.w800)),
                              TextSpan(
                                  text: 'ello',
                                  style: GoogleFonts.poppins(
                                      color: HexColor("#0D2A3C"),
                                      fontSize: screenwidth * 0.080,
                                      fontWeight: FontWeight.w800)),
                            ],
                          ),
                        ),
                        Ptext(
                          fonttext: "Shreyas patil",
                          size: screenwidth * 0.040,
                          weight: FontWeight.w400,
                        ),
                      ]),
                ),
                Positioned(
                  top: screenwidth * 0.10,
                  right: screenwidth * 0.08,
                  child: InkWell(
                    onTap: () {
                      if (scaffoldKey.currentState!.isDrawerOpen) {
                        scaffoldKey.currentState!.closeDrawer();
                      } else {
                        scaffoldKey.currentState!.openDrawer();
                      }
                    },
                    child: InkWell(
                      onTap: () {
                        Navigator.pushNamed(context, RoutesName.searchScreen);
                      },
                      child: Container(
                          child: Icon(
                        Icons.search,
                        size: screenwidth * 0.07,
                      )),
                    ),
                  ),
                ),
              ],
            ),
          ),
          SizedBox(
            height: screenhight * 0.02,
          ),
          Expanded(
              child: StreamBuilder<DatabaseEvent>(
            stream: firebaseRealTimeDatabase.getNotes(),
            builder:
                (BuildContext context, AsyncSnapshot<DatabaseEvent> snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              } else {
                if (snapshot.hasData && snapshot.data != null) {
                  var databaseValue = snapshot.data!.snapshot.value as Map;
                  var notesIdList = databaseValue.keys.map((e) => e).toList();

                  return GridView.builder(
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      // childAspectRatio: 0.75,
                    ),
                    itemCount: notesIdList.length,
                    itemBuilder: (BuildContext context, int index) {
                     var notesId = notesIdList[index];
                     var data = databaseValue[notesId]['data'];
                      return Card2(
                        discription: data['paragraph'].toString(),
                        title: data['title'].toString(),
                        index: notesId,
                        notesData: data,
                        slideToDelet: (uid) {
                          firebaseRealTimeDatabase.deletNotes(uid);
                        },
                        onPressButton: (uid, notesData) {
                          Navigator.pushNamed(
                              context, RoutesName.updateNotesScreen,
                              arguments: {"uid": uid, "notesData": notesData});
                        },
                      );
                    },
                  );
                } else {
                  return const Center(child: Text('No data found.'));
                }
              }
            },
          ))
        ],
      )),

      floatingActionButtonLocation: FloatingActionButtonLocation.miniEndFloat,
      floatingActionButton: FloatingActionButton(
        backgroundColor: HexColor("#0D2A3C"),
        onPressed: () {
          Navigator.pushNamed(context, RoutesName.createNotesScreen);
        },
        child: const Icon(Icons.add),
      ),
    );
  }

}
